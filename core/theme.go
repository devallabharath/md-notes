// Code generated by fyne-theme-generator

package core

import (
	"image/color"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/theme"
)

// Dark :: dark theme
type Dark struct{}

// NewTheme :: Creates and return new theme
func NewTheme() *Dark {
	return &Dark{}
}

// Color :: provides colors
func (Dark) Color(c fyne.ThemeColorName, v fyne.ThemeVariant) color.Color {
	switch c {
	case theme.ColorYellow:
	  return color.NRGBA{R: 0x00, G: 0xff, B: 0xff, A: 0xff}
	case theme.ColorNameBackground:
		return color.NRGBA{R: 0x32, G: 0x30, B: 0x43, A: 0xff}
	case theme.ColorNameButton:
		return color.Alpha16{A: 0x0}
	case theme.ColorNameDisabledButton:
		return color.NRGBA{R: 0x26, G: 0x26, B: 0x26, A: 0xff}
	case theme.ColorNameDisabled:
		return color.NRGBA{R: 0x42, G: 0x42, B: 0x42, A: 0x42}
	case theme.ColorNameError:
		return color.NRGBA{R: 0xf4, G: 0x43, B: 0x36, A: 0xff}
	case theme.ColorNameFocus:
		return color.NRGBA{R: 0x10, G: 0x4a, B: 0x79, A: 0x7f}
	case theme.ColorNameForeground:
		return color.NRGBA{R: 0xe0, G: 0xe1, B: 0xdd, A: 0xff}
	case theme.ColorNameHover:
		return color.NRGBA{R: 0xf, G: 0xf, B: 0xf, A: 0xf}
	case theme.ColorNameInputBackground:
		return color.NRGBA{R: 0x19, G: 0x19, B: 0x19, A: 0x19}
	case theme.ColorNamePlaceHolder:
		return color.NRGBA{R: 0xb2, G: 0xb2, B: 0xb2, A: 0xff}
	case theme.ColorNamePressed:
		return color.NRGBA{R: 0x66, G: 0x66, B: 0x66, A: 0x66}
	case theme.ColorNamePrimary:
		return color.NRGBA{R: 0x21, G: 0x96, B: 0xf3, A: 0xff}
	case theme.ColorNameScrollBar:
		return color.NRGBA{R: 0x0, G: 0x0, B: 0x0, A: 0x99}
	case theme.ColorNameShadow:
		return color.NRGBA{R: 0x0, G: 0x0, B: 0x0, A: 0x66}
	default:
		return theme.DefaultTheme().Color(c, v)
	}
}

// Font :: provides fonts
func (Dark) Font(s fyne.TextStyle) fyne.Resource {
	if s.Monospace {
		return fontCascadiaMonoTtf
	}
	if s.Bold {
		if s.Italic {
			return theme.DefaultTheme().Font(s)
		}
		return fontMiSansBoldTtf
	}
	if s.Italic {
		return theme.DefaultTheme().Font(s)
	}
	return fontMiSansRegularTtf
}

// Icon :: provides icons
func (Dark) Icon(n fyne.ThemeIconName) fyne.Resource {
	return theme.DefaultTheme().Icon(n)
}

// Size :: provides sizes
func (Dark) Size(s fyne.ThemeSizeName) float32 {
	switch s {
	case theme.SizeNameHeadingText:
		return 18
	case theme.SizeNameCaptionText:
		return 12
	case theme.SizeNameInlineIcon:
		return 12
	case theme.SizeNamePadding:
		return 2
	case theme.SizeNameScrollBar:
		return 5
	case theme.SizeNameScrollBarSmall:
		return 3
	case theme.SizeNameSeparatorThickness:
		return 1
	case theme.SizeNameText:
		return 12
	case theme.SizeNameInputBorder:
		return 1
	default:
		return theme.DefaultTheme().Size(s)
	}
}
