// Code generated by fyne-theme-generator

package themes

import (
	"image/color"

	"fyne.io/fyne/v2"
	"fyne.io/fyne/v2/theme"
)

const (
	light fyne.ThemeVariant = iota
	dark
	auto
)

type themeType struct {
	variant fyne.ThemeVariant
}

// NewTheme :: Creates and return new theme
func NewTheme(variant fyne.ThemeVariant) *themeType {
	Theme := themeType{variant}
	return &Theme
}

func getColor(c fyne.ThemeColorName, v fyne.ThemeVariant) color.Color {
	color, ok := Colors[v][c]
	if ok {
		return color
	} else {
		return theme.DefaultTheme().Color(c, v)
	}
}

// Color :: provides colors
func (t *themeType) Color(c fyne.ThemeColorName, v fyne.ThemeVariant) color.Color {
	switch t.variant {
	case light:
		return getColor(c, light)
	case dark:
		return getColor(c, dark)
	default:
		return getColor(c, v)
	}
}

// Font :: provides fonts
func (t *themeType) Font(s fyne.TextStyle) fyne.Resource {
	if s.Monospace {
		return fontCascadiaMonoTtf
	}
	if s.Bold {
		if s.Italic {
			return theme.DefaultTheme().Font(s)
		}
		return fontMiSansBoldTtf
	}
	if s.Italic {
		return theme.DefaultTheme().Font(s)
	}
	return fontMiSansRegularTtf
}

// Icon :: provides icons
func (t *themeType) Icon(n fyne.ThemeIconName) fyne.Resource {
	return theme.DefaultTheme().Icon(n)
}

// Size :: provides sizes
func (t *themeType) Size(s fyne.ThemeSizeName) float32 {
	switch s {
	case theme.SizeNameHeadingText:
		return 16
	case theme.SizeNameSubHeadingText:
		return 14
	case theme.SizeNameCaptionText:
		return 10
	case theme.SizeNameInlineIcon:
		return 12
	case theme.SizeNamePadding:
		return 2
	case theme.SizeNameScrollBar:
		return 5
	case theme.SizeNameScrollBarSmall:
		return 3
	case theme.SizeNameSeparatorThickness:
		return 1
	case theme.SizeNameText:
		return 12
	case theme.SizeNameInputBorder:
		return 1
	case "smaller":
		return 10
	case "tiny":
		return 4
	default:
		return theme.DefaultTheme().Size(s)
	}
}
